{"name":"Murmurquery","body":"# MurmurQuery\r\n\r\nMurmurQuery is a PHP class used for querying Murmur servers. It is based on [GT Murmur Plugin](http://www.gametracker.com/downloads/gtmurmurplugin.php), which allows us to query a Murmur server \r\nwithout having to install PHP ICE on the web server.\r\n\r\nThe response is constructed using [Channel Viewer Protocol](http://mumble.sourceforge.net/Channel_Viewer_Protocol).\r\n\r\n# Requirements\r\n\r\n* PHP 5\r\n* [Murmur/Mumble](http://mumble.sourceforge.net/) 1.2.x+ installed on the server\r\n* [GT Murmur Plugin](http://www.gametracker.com/downloads/gtmurmurplugin.php) installed on the same server on which Murmur is running\r\n\r\n# Usage\r\n\r\nYou can check the index.php file which comes with this package to see how to use this library.\r\n\r\n## Setup\r\n\r\nFirst you need to include the library in your PHP scripts where you're going to use it.\r\n\r\n`require_once('classes/MurmurQuery.php');`\r\n\r\nThen you need to set the configuration. You have two ways of doing it:\r\n* a) Pass in the parameters to the constructor.\r\n* b) Call the `setup()` and pass in the values to it.\r\n\r\na) Create new instance and set the values:\r\n\r\n`$murmur = new MurmurQuery($host, $port, $timeout, $format)`\r\n\r\nb) Set settings array, create new MurmurQuery instance without parameters and then call the setup() method:\r\n\r\n```\r\n// Set the parameters\r\n$settings\t\t=\tarray\r\n(\r\n\t'host'\t\t=>\t'127.0.0.1',\r\n\t'port'\t\t=>\t27800,\r\n\t'timeout'\t=>\t200,\r\n\t'format'\t=>\t'json'\r\n);\r\n\r\n// Create new instance\r\n$murmur = new MurmurQuery();\r\n\r\n// Load in the settings\r\n$murmur->setup($settings);\r\n```\r\n\r\nNote: when calling the setup() method, you can also set the values separately:\r\n\r\n`$murmur->setup('127.0.0.1', 27800, 200, 'json');`\r\n\r\n### Optional parameters\r\n\r\nNot all parameters are necessary. To query a murmur server you only need the host if the server uses default settings. Otherwise you may need to set the port too. Timeout and format parameters are completely optional.\r\n\r\n## Querying The Server\r\n\r\nQuerying the server is as easy as calling the query() method:\r\n\r\n`$murmur->query();`\r\n\r\n## Handling the response\r\n\r\nAs soon as you query the server, you have the ability to check the server's status, get full response data etc.\r\n\r\n### Server Online Status\r\n\r\n```\r\nif($murmur->is_online())\r\n{\r\n\techo 'Server is online!';\r\n}\r\nelse\r\n{\r\n\techo 'Server is offline.';\r\n}\r\n```\r\n\r\n### Respnse Data\r\n\r\n`$response = $mumur->get_status();`\r\n\r\nThis will return three pieces of information: the users, the channels and original response data.\r\n\r\n```\r\nprint_r($response['channels']);\r\nprint_r($response['users']);\r\nprint_r($response['original']);\r\n```\r\n\r\nBy default the library parses the returned JSON/XML data to an array and pushes extra values (channels and users). However, you can get the raw response by setting raw parameter to `true`:\r\n\r\n`$raw_response = $murmur->get_status(true);`\r\n\r\nKeep in mind you'll have to parse the data yourself. For example, if you're using json as the preferred format:\r\n\r\n```\r\n$raw_response = $murmur->get_status(true);\r\n$data = json_decode($raw_response, true);\r\n```\r\n\r\n### Channels\r\n\r\nTo get the list of available channels:\r\n\r\n`$channels = $murmur->get_channels();`\r\n\r\n### Users\r\n\r\nTo get the list of all online users:\r\n\r\n`$users = $murmur->get_users();`\r\n\r\n### \r\n\r\n# CHANGELOG\r\n\r\n## 0.6\r\n\r\n* get_response() method now returns already parsed data. However, you can set get_response(true) to get the raw response.\r\n* Added support for getting the channels and users lists separately with get_channels() and get_users() respectively.\r\n\r\n# COPYRIGHT\r\n\r\nCopyright (c) 2011 Edmundas Kondra≈°ovas\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy \r\nof this software and associated documentation files (the \"Software\"), to deal \r\nin the Software without restriction, including without limitation the rights \r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell \r\ncopies of the Software, and to permit persons to whom the Software is \r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in \r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, \r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN \r\nTHE SOFTWARE.\r\n\r\n","tagline":"MurmurQuery is a PHP class based on GT Murmur Plugin & used for querying Murmur servers.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}